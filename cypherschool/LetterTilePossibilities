class Solution {
    public int tribonacci(int n) {        
        return tibBottomUp(n);    
    }
    
    private static int tibBottomUp(int n) {
        
        if (n == 0) {
            return 0;
        }
        
        if ( n < 3) {
            return 1;
        }
        
        int[] cache = new int[n+1];
        cache[0] = 0;
        cache[1] = 1;
        cache[2] = 1;
        for (int i = 3; i < n+1; i++) {
            cache[i] = cache[i-1] + cache[i-2] + cache[i-3];
        }
        
        return cache[n];
    }
    

    
    private static int tibRecursive(int n) {
		
		if (n == 0) {
			return 0;
		}		
		if (n == 1 || n == 2) {
			return 1;
		}
		return tibRecursive(n-1) + tibRecursive(n-2) + tibRecursive(n-3);
	}
}